// 例程：
/*列举可以有的帧间隔 frame intervals */
//int enum_camera_frmival(__u32 format)
//{
//    struct v4l2_frmivalenum frmival;
//    memset(&frmival, 0, sizeof(frmival));
//    frmival.width = 640;
//    frmival.height = 480;
//    frmival.pixel_format = format;
//    // frmival.type = V4L2_FRMIVAL_TYPE_DISCRETE;
//    frmival.index = 0;
//    printf("\tthe frame intervals enum\n");
//
//    while (ioctl(fd, VIDIOC_ENUM_FRAMEINTERVALS, &frmival) == 0)
//    {
//        // 输出分数，即帧间隔
//        printf("%d.frameinterval:%u/%u\n ", frmival.index,
//               frmival.discrete.numerator, frmival.discrete.denominator);
//        frmival.index++;
//    }
//    printf(".........................................\n");
//    return 0;
//}
//
//static int set_framerate()
//{
//    struct v4l2_streamparm parm;
//
//    parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
//
//    parm.parm.capture.timeperframe.numerator = 1;
//    parm.parm.capture.timeperframe.denominator = 1;
//
//    int ret = xioctl(fd, VIDIOC_S_PARM, &parm);
//
//    if (ret < 0)
//    {
//        return 0;
//    }
//
//    memset(&parm, 0, sizeof(parm));
//    parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
//    if (ioctl(fd, VIDIOC_G_PARM, &parm) == -1)
//    {
//        printf("Unable to get frame rate\n");
//        return 0;
//    }
//    printf("My rate:%d/%d\n", parm.parm.capture.timeperframe.numerator,
//           parm.parm.capture.timeperframe.denominator);
//
//    return 1;
//}


//        int i;
//        for (i = 0; i < i_frame_size; i++) {
//            printf("%02X", nal->p_payload[i]);
//        }
//        printf("\n\n");



int video_socket(void)
{
    int socket_desc, client_sock, client_size;
    struct sockaddr_in server_addr, client_addr;
    char server_message[1024 * 8], client_message[1024 * 8];

    // Clean buffers:
    memset(server_message, '\0', sizeof(server_message));
    memset(client_message, '\0', sizeof(client_message));

    // Create socket:
    socket_desc = socket(AF_INET, SOCK_STREAM, 0);

    if(socket_desc < 0){
        printf("Error while creating socket\n");
        return -1;
    }
    printf("Socket created successfully\n");

    // Set port and IP:
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(10001);
    server_addr.sin_addr.s_addr = inet_addr("0.0.0.0");

    // Bind to the set port and IP:
    if(bind(socket_desc, (struct sockaddr*)&server_addr, sizeof(server_addr))<0){
        printf("Couldn't bind to the port\n");
        return -1;
    }
    printf("Done with binding\n");

    // Listen for clients:
    if(listen(socket_desc, 1) < 0){
        printf("Error while listening\n");
        return -1;
    }
    printf("\nListening for incoming connections.....\n");

    // Accept an incoming connection:
    client_size = sizeof(client_addr);
    client_sock = accept(socket_desc, (struct sockaddr*)&client_addr, &client_size);

    if (client_sock < 0){
        printf("Can't accept\n");
        return -1;
    }
    printf("Client connected at IP: %s and port: %i\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));

    // Receive client's message:
    if (recv(client_sock, client_message, sizeof(client_message), 0) < 0){
        printf("Couldn't receive\n");
        return -1;
    }
    printf("Msg from client: %s\n", client_message);

    // Respond to client:
    strcpy(server_message, "This is the server's message.");

    if (send(client_sock, server_message, strlen(server_message), 0) < 0){
        printf("Can't send\n");
        return -1;
    }

    // Closing the socket:
    close(client_sock);
    close(socket_desc);

    return 0;
}